<UserControl x:Class="JosephM.Wpf.Grid.DynamicGridView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:fakes="clr-namespace:JosephM.Application.ViewModel.Fakes;assembly=JosephM.Application.ViewModel.Fakes"
             xmlns:controlExtentions="clr-namespace:JosephM.Wpf.ControlExtentions"
             xmlns:shared="clr-namespace:JosephM.Wpf.Shared"
             mc:Ignorable="d"
             d:DesignWidth="800"
             d:DesignHeight="800"
             d:DataContext="{d:DesignInstance Type=fakes:FakeGridViewModel, IsDesignTimeCreatable=True}"
             >
    <UserControl.Resources>
        <ResourceDictionary>
            <BooleanToVisibilityConverter x:Key="BoolToVis" />
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/JosephM.Wpf;component/Resources/DataGrid.xaml" />
                <ResourceDictionary Source="/JosephM.Wpf;component/Resources/Converters.xaml" />
                <ResourceDictionary Source="/JosephM.Wpf;component/Resources/Buttons.xaml" />
                <ResourceDictionary Source="/JosephM.Wpf;component/Resources/Base.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid Style="{StaticResource DynamicGridContainer}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Visibility="{Binding LoadingViewModel.IsLoading, Converter={StaticResource BoolToVis}, Mode=OneWay}">
            <shared:LoadingView DataContext="{Binding LoadingViewModel}" />
        </Grid>
        <Grid Grid.Row="1" Visibility="{Binding GridLoadError, Converter={StaticResource BoolToVis}}">
            <TextBlock
                    Text="{Binding ErrorMessage}"
                     Style="{StaticResource ValidationMessage}"  />
        </Grid>
        <Grid Grid.Row="2"   Visibility="{Binding LoadingViewModel.IsLoading, Converter={StaticResource BooleanToVisibilityHiddenNotCollapsedConverter}, Mode=OneWay}" >
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Name="SortingLoadGrid" Grid.Row="0" Visibility="Collapsed" >
                    <shared:LoadingView DataContext="{Binding SortLoadingViewModel}" />
                </Grid>
                <Grid Name="SortingMainGrid" Grid.Row="0" Visibility="{Binding GridLoaded, Converter={StaticResource BoolToVis}}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto"  />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0" VerticalAlignment="Center" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Grid Grid.Column="0" 
                                  Visibility="{Binding CanAddRow, Converter={StaticResource BoolToVis}}"
                                  Style="{StaticResource GridFunctionSection}"
                                    >
                                <WrapPanel Orientation="Horizontal"  VerticalAlignment="Center">
                                    <Button DataContext="{Binding Path=AddRowButton}"
                                        Style="{StaticResource AddRowButton}"
                                        Command="{Binding Command}" ToolTip="Add New" />
                                    <Grid Grid.Row="0" Visibility="{Binding CanAddMultipleRow, Converter={StaticResource BoolToVis}}">
                                        <Button DataContext="{Binding Path=AddMultipleRowButton}"
                                            Style="{StaticResource AddMultipleRowButton}"
                                                Command="{Binding Command}" ToolTip="Add Multiple" />
                                    </Grid>
                                </WrapPanel>
                            </Grid>
                            <Grid Grid.Column="1" Visibility="{Binding CanExpandGrid, Converter={StaticResource BoolToVis}}">
                                <Button DataContext="{Binding Path=ExpandGridButton}"
                                            Style="{StaticResource FullScreenButton}"
                                                Command="{Binding Command}" ToolTip="Expand Grid" />
                            </Grid>
                            <Grid Grid.Column="2"
                                  Style="{StaticResource GridFunctionSection}"
                                  >
                                <ItemsControl
                                    ItemsSource="{Binding CustomFunctions}"
                                    ItemTemplate="{StaticResource XrmButtonTemplate}">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <WrapPanel Orientation="Horizontal" />
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                </ItemsControl>
                            </Grid>
                        </Grid>
                        <Grid Grid.Row="1">
                            <DataGrid
                                controlExtentions:FocusExtension.IsFocused="{Binding IsFocused, Mode=TwoWay}"
                                CanUserSortColumns="False" Style="{StaticResource SectionDataGrid}" Name="DataGrid"
                                CanUserAddRows="True" SelectionChanged="DataGrid_SelectionChanged" SelectionMode="{Binding MultiSelect, Converter={StaticResource BooleanToMultiSelectConverter}}"
                                ClipboardCopyMode="IncludeHeader" CopyingRowClipboardContent="DataGrid_CopyingRowClipboardContent"
                                >
                                <DataGrid.Resources>
                                    <Style TargetType="{x:Type DataGridCell}">
                                        <Style.Triggers>
                                            <Trigger Property="DataGridCell.IsSelected" Value="True">
                                                <Setter Property="Background" Value="{DynamicResource SelectedBackgroundColor}" />
                                                <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                    <ContextMenu  x:Key="RowMenu" DataContext="{Binding PlacementTarget.DataContext, RelativeSource={RelativeSource Self}}" Visibility="{Binding DisplayContextMenu, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <MenuItem Header="Open" Command="{Binding EditRowViewModel.Command}" Visibility="{Binding CanEdit, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <MenuItem Header="Open In New Tab" Command="{Binding EditRowNewTabViewModel.Command}" Visibility="{Binding CanEditNewTab, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <MenuItem Header="Open In New Window" Command="{Binding EditRowNewWindowViewModel.Command}" Visibility="{Binding CanEditNewWindow, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <MenuItem Header="Open In Browser" Command="{Binding OpenWebViewModel.Command}" Visibility="{Binding CanOpenWeb, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                        <MenuItem Header="Remove" Command="{Binding DeleteRowViewModel.Command}" Visibility="{Binding CanDelete, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                    </ContextMenu>
                                </DataGrid.Resources>
                                <DataGrid.ColumnHeaderStyle>
                                    <Style TargetType="DataGridColumnHeader">
                                        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}" />
                                        <Setter Property="BorderThickness" Value=".5" />
                                        <EventSetter Event="Click" Handler="columnHeader_Click" />
                                        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalJustify, Converter={StaticResource AlignHorizontalConverter}}" />
                                        <Setter Property="ContentTemplate" Value="{StaticResource ColumnHeaderTemplate}" />
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsMouseOver}" Value="True"/>
                                                    <Condition Binding="{Binding IsSortable}" Value="True"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Background" Value="{DynamicResource SelectedBackgroundColor}" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>

                                    </Style>
                                </DataGrid.ColumnHeaderStyle>
                                <DataGrid.RowHeaderStyle>
                                    <Style TargetType="DataGridRowHeader">
                                        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}" />
                                    </Style>
                                </DataGrid.RowHeaderStyle>
                                <DataGrid.RowStyle>
                                    <Style TargetType="DataGridRow">
                                        <Setter Property="ContextMenu" Value="{StaticResource RowMenu}" />
                                        <Setter Property="Background" Value="Transparent" />
                                        <Setter Property="Visibility" Value="{Binding IsVisible, Converter={StaticResource BoolToVis}}" />
                                    </Style>
                                </DataGrid.RowStyle>
                            </DataGrid>
                        </Grid>
                        <Grid  Grid.Row="2"
                               HorizontalAlignment="Center"
                               Visibility="{Binding PageDescription, Converter={StaticResource NullToHiddenConverter}}">
                            <WrapPanel Orientation="Horizontal">
                                <Grid Visibility="{Binding IsNotFirstPage, Converter={StaticResource BoolToVis}}" >
                                    <Button DataContext="{Binding PreviousPageButton}" Style="{StaticResource PreviousButton}" Command="{Binding Command}" />
                                </Grid>
                                <TextBlock Name="PageDescriptionTextBlock" Text="{Binding PageDescription}"></TextBlock>
                                <Grid Visibility="{Binding HasMoreRows, Converter={StaticResource BoolToVis}}"  >
                                    <Grid Visibility="{Binding HasMoreRows, Converter={StaticResource BoolToVis}}" >
                                        <Button DataContext="{Binding NextPageButton}" Style="{StaticResource NextButton}" Command="{Binding Command}" />
                                    </Grid>
                                </Grid>
                            </WrapPanel>
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        </Grid>
    </Grid>
</UserControl>