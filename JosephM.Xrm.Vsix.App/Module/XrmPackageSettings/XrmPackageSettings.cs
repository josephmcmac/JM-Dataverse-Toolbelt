
using JosephM.Core.Attributes;
using JosephM.Core.FieldType;
using JosephM.Record.Attributes;
using JosephM.Record.Query;
using JosephM.Xrm.Schema;
using JosephM.XrmModule.Crud.Validations;
using JosephM.XrmModule.SavedXrmConnections;
using System.Collections.Generic;
using System.Linq;

namespace JosephM.Xrm.Vsix.Module.PackageSettings
{
    [Instruction("Enter Settings Used By The Visual Studio Extention\n\nThese Settings Are Specific For This Solution And Will Be Stored In A File In A SolutionItems Folder")]
    [Group(Sections.ObjectPrefixes, true, 20)]
    [Group(Sections.Solution, true, 10)]
    [Group(Sections.ConnectionInstances, true, 30)]
    [Group(Sections.OtherSolutionOptions, true, 40)]
    public class XrmPackageSettings : ISavedXrmConnections
    {
        [DisplayOrder(10)]
        [MyDescription("Select If Items Deployed Into Dynamics Will Be Added Into A Solution")]
        [Group(Sections.Solution)]
        public bool AddToSolution { get; set; }

        [DisplayOrder(20)]
        [MyDescription("Select The Solution To Add Deployed Items Into")]
        [Group(Sections.Solution)]
        [RequiredProperty]
        [ReferencedType(Entities.solution)]
        [UsePicklist(Fields.solution_.uniquename)]
        [LookupCondition(Fields.solution_.ismanaged, false)]
        [LookupCondition(Fields.solution_.isvisible, true)]
        [LookupCondition(Fields.solution_.uniquename, ConditionType.NotEqual, "default")]
        [PropertyInContextByPropertyValue(nameof(AddToSolution), true)]
        public Lookup Solution { get; set; }

        [DisplayOrder(110)]
        [MyDescription("String Used To Prefix The Names Of Objects Generated By Project And Item Templates")]
        [Group(Sections.ObjectPrefixes)]
        [RequiredProperty]
        [ClassPrefixValidation]
        [DisplayName("Class Prefix")]
        public string SolutionObjectPrefix { get; set; }

        [DisplayOrder(120)]
        [MyDescription("String Used To Prefix The Names Of Deployable Files Generated By Project And Item Templates")]
        [Group(Sections.ObjectPrefixes)]
        [RequiredProperty]
        [PrefixValidation]
        [DisplayName("Customisation Prefix")]
        public string SolutionDynamicsCrmPrefix { get; set; }

        [Hidden]
        public string SolutionObjectInstancePrefix
        {
            get
            {
                if (string.IsNullOrEmpty(SolutionObjectPrefix))
                    return SolutionObjectPrefix;
                if (char.IsLower(SolutionObjectPrefix[0]))
                    return "" + char.ToUpper(SolutionObjectPrefix[0]) + (SolutionObjectPrefix.Length == 1 ? "" : SolutionObjectPrefix.Substring(1));
                if (char.IsUpper(SolutionObjectPrefix[0]))
                    return "" + char.ToLower(SolutionObjectPrefix[0]) + (SolutionObjectPrefix.Length == 1 ? "" : SolutionObjectPrefix.Substring(1));
                return SolutionObjectPrefix;
            }
        }

        [DisplayOrder(310)]
        [Group(Sections.OtherSolutionOptions)]
        [MyDescription("Specify If You Only Want To Display Plugin Assembly Options For Specific Projects")]
        public IEnumerable<PluginProject> PluginProjects { get; set; }

        [DisplayOrder(320)]
        [Group(Sections.OtherSolutionOptions)]
        [MyDescription("Specify If You Only Want To Display Deploy Web Resource Options Within Specific Projects")]
        public IEnumerable<WebResourceProject> WebResourceProjects { get; set; }

        [DisplayOrder(320)]
        [Group(Sections.OtherSolutionOptions)]
        [MyDescription("Specify These If You Only Want To Display Portal Code / Deploy Into Field Options For Specific Projects")]
        public IEnumerable<DeployIntoFieldProject> DeployIntoFieldProjects { get; set; }

        [DisplayOrder(210)]
        [FormEntry]
        [Group(Sections.ConnectionInstances)]
        public IEnumerable<SavedXrmRecordConfiguration> Connections { get; set; }

        public bool AddIlMergePathForProject(string projectName)
        {
            return PluginProjects != null
                && PluginProjects.Any(pp => pp.ProjectName?.ToLower() == projectName?.ToLower())
                && PluginProjects.First(pp => pp.ProjectName?.ToLower() == projectName?.ToLower()).UsesILMergeMsBuildTask;
        }

        [DoNotAllowGridOpen]
        public class PluginProject
        {
            public PluginProject()
            {

            }

            public PluginProject(string projectName)
            {
                ProjectName = projectName;
            }

            [GridWidth(330)]
            [RequiredProperty]
            public string ProjectName { get; set; }

            [GridWidth(150)]
            [RequiredProperty]
            [DisplayName("Uses ILMerge-MSBuild-Task")]
            [MyDescription("ILMerge-MSBuild-Task output will be used for this project if this flag is checked, but is only supported for the standard ILMerge output path and where an ILMergeConfig.json file is used to limit the dlls included (rather than the default CopyAll)")]
            public bool UsesILMergeMsBuildTask { get; set; }
        }

        [DoNotAllowGridOpen]
        public class WebResourceProject
        {
            public WebResourceProject()
            {

            }

            public WebResourceProject(string projectName)
            {
                ProjectName = projectName;
            }

            [GridWidth(330)]
            [RequiredProperty]
            public string ProjectName { get; set; }
        }

        [DoNotAllowGridOpen]
        public class DeployIntoFieldProject
        {
            public DeployIntoFieldProject()
            {

            }

            public DeployIntoFieldProject(string projectName)
            {
                ProjectName = projectName;
            }

            [GridWidth(330)]
            [RequiredProperty]
            public string ProjectName { get; set; }
        }

        private static class Sections
        {
            public const string ObjectPrefixes = "Prefixes";
            public const string Solution = "Active Dev Solution";
            public const string ConnectionInstances = "Instance Connections";
            public const string OtherSolutionOptions = "Project Code Type Options - use these to filter menu options within projects. If you want to hide menu options for all projects just insert a fake project name";
        }
    }
}